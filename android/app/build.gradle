apply plugin: "com.android.application"
apply plugin: 'kotlin-android'
apply plugin: 'com.google.protobuf'
apply plugin: "com.cookpad.android.plugin.license-tools"
apply plugin: "com.facebook.react"

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/@react-native/codegen
    // codegenDir = file("../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    // cliFile = file("../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion
    compileSdkVersion rootProject.ext.compileSdkVersion
    namespace 'com.nayuta.core2'
    packagingOptions {
        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/x86_64/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
        jniLibs {
            useLegacyPackaging = true
        }
    }
    defaultConfig {
        applicationId "com.nayuta.core2"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 102
        versionName "0.4.0 (1)"
        ndk {
            // Tells Gradle to build outputs for the following ABIs and package
            // them into your APK.
            abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a' 
        }
        missingDimensionStrategy 'react-native-camera', 'general'
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }

        release {
            if (project.hasProperty('RELEASE_UPLOAD_STORE_FILE')) {
                storeFile file(RELEASE_UPLOAD_STORE_FILE)
                storePassword RELEASE_UPLOAD_STORE_PASSWORD
                keyAlias RELEASE_UPLOAD_KEY_ALIAS
                keyPassword RELEASE_UPLOAD_KEY_PASSWORD
            }
        } 
        
        stgrelease {
            if (project.hasProperty('STAGING_UPLOAD_STORE_FILE')) {
                storeFile file(STAGING_UPLOAD_STORE_FILE)
                storePassword STAGING_UPLOAD_STORE_PASSWORD
                keyAlias STAGING_UPLOAD_KEY_ALIAS
                keyPassword STAGING_UPLOAD_KEY_PASSWORD
            }
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            debuggable true
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.release
            debuggable false
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            ndk {
                abiFilters "armeabi-v7a", "x86", 'arm64-v8a'
            }
        }
        stgrelease {
            initWith release
            applicationIdSuffix ".staging"
            matchingFallbacks = ['release'] 
            versionNameSuffix "-staging"
            signingConfig signingConfigs.stgrelease
        }

    }
    flavorDimensions "network"
    productFlavors {
        nmain {
            dimension "network"
            applicationIdSuffix ".oss"
            versionNameSuffix "-oss"
        }
        ntest { // ProductFlavor names cannot start with 'test' so Network TESTnet
            dimension "network"
            applicationIdSuffix ".testnet"
            versionNameSuffix "-testnet"
        }
        nsig { // ProductFlavor names cannot start with 'sig' so Network SIGnet
            dimension "network"
            applicationIdSuffix ".signet"
            versionNameSuffix "-signet"
        }
    }
}

dependencies {    
    implementation fileTree(dir: "libs", include: ["*.jar",'*.aar'])
    
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")
    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'com.android.volley:volley:1.2.1'
    implementation 'com.jakewharton:process-phoenix:2.1.2' // Restart

    // https://github.com/grpc/grpc-java/tree/v1.56.1
    implementation 'io.grpc:grpc-android:1.56.1'
    implementation 'io.grpc:grpc-okhttp:1.56.1'
    implementation 'io.grpc:grpc-protobuf-lite:1.56.1'
    implementation 'io.grpc:grpc-stub:1.56.1'
    implementation 'com.google.protobuf:protobuf-gradle-plugin:0.9.3'
    compileOnly 'org.apache.tomcat:annotations-api:6.0.53' // necessary for Java 9+

    // https://developer.android.com/google/play/integrity/setup?hl=ja#kotlin-or-java
    implementation 'com.google.android.play:integrity:1.1.0'
}

// https://github.com/grpc/grpc-java/tree/v1.56.1
protobuf {
    protoc {
        if (project.hasProperty('platform')) {
            artifact = "com.google.protobuf:protoc:3.22.3:${platform}"
        } else {
            artifact = "com.google.protobuf:protoc:3.22.3"
        }
    }
    plugins {
        grpc {
            if (project.hasProperty('platform')) {
                artifact = "io.grpc:protoc-gen-grpc-java:1.56.1:${platform}"
            } else {
                artifact = 'io.grpc:protoc-gen-grpc-java:1.56.1'
            }
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java { option 'lite' }
            }
            task.plugins {
                grpc { option 'lite' }
            }
        }
    }
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"
