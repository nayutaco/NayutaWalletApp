//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: router.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Router is a service that offers advanced interaction with the router
/// subsystem of the daemon.
///
/// Usage: instantiate `Routerrpc_RouterClient`, then call methods of this protocol to make API calls.
public protocol Routerrpc_RouterClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Routerrpc_RouterClientInterceptorFactoryProtocol? { get }

  func sendPaymentV2(
    _ request: Routerrpc_SendPaymentRequest,
    callOptions: CallOptions?,
    handler: @escaping (Lnrpc_Payment) -> Void
  ) -> ServerStreamingCall<Routerrpc_SendPaymentRequest, Lnrpc_Payment>

  func trackPaymentV2(
    _ request: Routerrpc_TrackPaymentRequest,
    callOptions: CallOptions?,
    handler: @escaping (Lnrpc_Payment) -> Void
  ) -> ServerStreamingCall<Routerrpc_TrackPaymentRequest, Lnrpc_Payment>

  func estimateRouteFee(
    _ request: Routerrpc_RouteFeeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Routerrpc_RouteFeeRequest, Routerrpc_RouteFeeResponse>

  func sendToRoute(
    _ request: Routerrpc_SendToRouteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Routerrpc_SendToRouteRequest, Routerrpc_SendToRouteResponse>

  func sendToRouteV2(
    _ request: Routerrpc_SendToRouteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Routerrpc_SendToRouteRequest, Lnrpc_HTLCAttempt>

  func resetMissionControl(
    _ request: Routerrpc_ResetMissionControlRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Routerrpc_ResetMissionControlRequest, Routerrpc_ResetMissionControlResponse>

  func queryMissionControl(
    _ request: Routerrpc_QueryMissionControlRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Routerrpc_QueryMissionControlRequest, Routerrpc_QueryMissionControlResponse>

  func xImportMissionControl(
    _ request: Routerrpc_XImportMissionControlRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Routerrpc_XImportMissionControlRequest, Routerrpc_XImportMissionControlResponse>

  func getMissionControlConfig(
    _ request: Routerrpc_GetMissionControlConfigRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Routerrpc_GetMissionControlConfigRequest, Routerrpc_GetMissionControlConfigResponse>

  func setMissionControlConfig(
    _ request: Routerrpc_SetMissionControlConfigRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Routerrpc_SetMissionControlConfigRequest, Routerrpc_SetMissionControlConfigResponse>

  func queryProbability(
    _ request: Routerrpc_QueryProbabilityRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Routerrpc_QueryProbabilityRequest, Routerrpc_QueryProbabilityResponse>

  func buildRoute(
    _ request: Routerrpc_BuildRouteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Routerrpc_BuildRouteRequest, Routerrpc_BuildRouteResponse>

  func subscribeHtlcEvents(
    _ request: Routerrpc_SubscribeHtlcEventsRequest,
    callOptions: CallOptions?,
    handler: @escaping (Routerrpc_HtlcEvent) -> Void
  ) -> ServerStreamingCall<Routerrpc_SubscribeHtlcEventsRequest, Routerrpc_HtlcEvent>

  func sendPayment(
    _ request: Routerrpc_SendPaymentRequest,
    callOptions: CallOptions?,
    handler: @escaping (Routerrpc_PaymentStatus) -> Void
  ) -> ServerStreamingCall<Routerrpc_SendPaymentRequest, Routerrpc_PaymentStatus>

  func trackPayment(
    _ request: Routerrpc_TrackPaymentRequest,
    callOptions: CallOptions?,
    handler: @escaping (Routerrpc_PaymentStatus) -> Void
  ) -> ServerStreamingCall<Routerrpc_TrackPaymentRequest, Routerrpc_PaymentStatus>

  func htlcInterceptor(
    callOptions: CallOptions?,
    handler: @escaping (Routerrpc_ForwardHtlcInterceptRequest) -> Void
  ) -> BidirectionalStreamingCall<Routerrpc_ForwardHtlcInterceptResponse, Routerrpc_ForwardHtlcInterceptRequest>

  func updateChanStatus(
    _ request: Routerrpc_UpdateChanStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Routerrpc_UpdateChanStatusRequest, Routerrpc_UpdateChanStatusResponse>
}

extension Routerrpc_RouterClientProtocol {
  public var serviceName: String {
    return "routerrpc.Router"
  }

  ///
  ///SendPaymentV2 attempts to route a payment described by the passed
  ///PaymentRequest to the final destination. The call returns a stream of
  ///payment updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SendPaymentV2.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func sendPaymentV2(
    _ request: Routerrpc_SendPaymentRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Lnrpc_Payment) -> Void
  ) -> ServerStreamingCall<Routerrpc_SendPaymentRequest, Lnrpc_Payment> {
    return self.makeServerStreamingCall(
      path: Routerrpc_RouterClientMetadata.Methods.sendPaymentV2.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendPaymentV2Interceptors() ?? [],
      handler: handler
    )
  }

  ///
  ///TrackPaymentV2 returns an update stream for the payment identified by the
  ///payment hash.
  ///
  /// - Parameters:
  ///   - request: Request to send to TrackPaymentV2.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func trackPaymentV2(
    _ request: Routerrpc_TrackPaymentRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Lnrpc_Payment) -> Void
  ) -> ServerStreamingCall<Routerrpc_TrackPaymentRequest, Lnrpc_Payment> {
    return self.makeServerStreamingCall(
      path: Routerrpc_RouterClientMetadata.Methods.trackPaymentV2.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTrackPaymentV2Interceptors() ?? [],
      handler: handler
    )
  }

  ///
  ///EstimateRouteFee allows callers to obtain a lower bound w.r.t how much it
  ///may cost to send an HTLC to the target end destination.
  ///
  /// - Parameters:
  ///   - request: Request to send to EstimateRouteFee.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func estimateRouteFee(
    _ request: Routerrpc_RouteFeeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Routerrpc_RouteFeeRequest, Routerrpc_RouteFeeResponse> {
    return self.makeUnaryCall(
      path: Routerrpc_RouterClientMetadata.Methods.estimateRouteFee.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateRouteFeeInterceptors() ?? []
    )
  }

  ///
  ///Deprecated, use SendToRouteV2. SendToRoute attempts to make a payment via
  ///the specified route. This method differs from SendPayment in that it
  ///allows users to specify a full route manually. This can be used for
  ///things like rebalancing, and atomic swaps. It differs from the newer
  ///SendToRouteV2 in that it doesn't return the full HTLC information.
  ///
  /// - Parameters:
  ///   - request: Request to send to SendToRoute.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func sendToRoute(
    _ request: Routerrpc_SendToRouteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Routerrpc_SendToRouteRequest, Routerrpc_SendToRouteResponse> {
    return self.makeUnaryCall(
      path: Routerrpc_RouterClientMetadata.Methods.sendToRoute.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendToRouteInterceptors() ?? []
    )
  }

  ///
  ///SendToRouteV2 attempts to make a payment via the specified route. This
  ///method differs from SendPayment in that it allows users to specify a full
  ///route manually. This can be used for things like rebalancing, and atomic
  ///swaps.
  ///
  /// - Parameters:
  ///   - request: Request to send to SendToRouteV2.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func sendToRouteV2(
    _ request: Routerrpc_SendToRouteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Routerrpc_SendToRouteRequest, Lnrpc_HTLCAttempt> {
    return self.makeUnaryCall(
      path: Routerrpc_RouterClientMetadata.Methods.sendToRouteV2.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendToRouteV2Interceptors() ?? []
    )
  }

  ///
  ///ResetMissionControl clears all mission control state and starts with a clean
  ///slate.
  ///
  /// - Parameters:
  ///   - request: Request to send to ResetMissionControl.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func resetMissionControl(
    _ request: Routerrpc_ResetMissionControlRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Routerrpc_ResetMissionControlRequest, Routerrpc_ResetMissionControlResponse> {
    return self.makeUnaryCall(
      path: Routerrpc_RouterClientMetadata.Methods.resetMissionControl.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResetMissionControlInterceptors() ?? []
    )
  }

  ///
  ///QueryMissionControl exposes the internal mission control state to callers.
  ///It is a development feature.
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryMissionControl.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func queryMissionControl(
    _ request: Routerrpc_QueryMissionControlRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Routerrpc_QueryMissionControlRequest, Routerrpc_QueryMissionControlResponse> {
    return self.makeUnaryCall(
      path: Routerrpc_RouterClientMetadata.Methods.queryMissionControl.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryMissionControlInterceptors() ?? []
    )
  }

  ///
  ///XImportMissionControl is an experimental API that imports the state provided
  ///to the internal mission control's state, using all results which are more
  ///recent than our existing values. These values will only be imported
  ///in-memory, and will not be persisted across restarts.
  ///
  /// - Parameters:
  ///   - request: Request to send to XImportMissionControl.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func xImportMissionControl(
    _ request: Routerrpc_XImportMissionControlRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Routerrpc_XImportMissionControlRequest, Routerrpc_XImportMissionControlResponse> {
    return self.makeUnaryCall(
      path: Routerrpc_RouterClientMetadata.Methods.xImportMissionControl.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeXImportMissionControlInterceptors() ?? []
    )
  }

  ///
  ///GetMissionControlConfig returns mission control's current config.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMissionControlConfig.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getMissionControlConfig(
    _ request: Routerrpc_GetMissionControlConfigRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Routerrpc_GetMissionControlConfigRequest, Routerrpc_GetMissionControlConfigResponse> {
    return self.makeUnaryCall(
      path: Routerrpc_RouterClientMetadata.Methods.getMissionControlConfig.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMissionControlConfigInterceptors() ?? []
    )
  }

  ///
  ///SetMissionControlConfig will set mission control's config, if the config
  ///provided is valid.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetMissionControlConfig.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setMissionControlConfig(
    _ request: Routerrpc_SetMissionControlConfigRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Routerrpc_SetMissionControlConfigRequest, Routerrpc_SetMissionControlConfigResponse> {
    return self.makeUnaryCall(
      path: Routerrpc_RouterClientMetadata.Methods.setMissionControlConfig.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetMissionControlConfigInterceptors() ?? []
    )
  }

  ///
  ///QueryProbability returns the current success probability estimate for a
  ///given node pair and amount.
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryProbability.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func queryProbability(
    _ request: Routerrpc_QueryProbabilityRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Routerrpc_QueryProbabilityRequest, Routerrpc_QueryProbabilityResponse> {
    return self.makeUnaryCall(
      path: Routerrpc_RouterClientMetadata.Methods.queryProbability.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryProbabilityInterceptors() ?? []
    )
  }

  ///
  ///BuildRoute builds a fully specified route based on a list of hop public
  ///keys. It retrieves the relevant channel policies from the graph in order to
  ///calculate the correct fees and time locks.
  ///
  /// - Parameters:
  ///   - request: Request to send to BuildRoute.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func buildRoute(
    _ request: Routerrpc_BuildRouteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Routerrpc_BuildRouteRequest, Routerrpc_BuildRouteResponse> {
    return self.makeUnaryCall(
      path: Routerrpc_RouterClientMetadata.Methods.buildRoute.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBuildRouteInterceptors() ?? []
    )
  }

  ///
  ///SubscribeHtlcEvents creates a uni-directional stream from the server to
  ///the client which delivers a stream of htlc events.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeHtlcEvents.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func subscribeHtlcEvents(
    _ request: Routerrpc_SubscribeHtlcEventsRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Routerrpc_HtlcEvent) -> Void
  ) -> ServerStreamingCall<Routerrpc_SubscribeHtlcEventsRequest, Routerrpc_HtlcEvent> {
    return self.makeServerStreamingCall(
      path: Routerrpc_RouterClientMetadata.Methods.subscribeHtlcEvents.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeHtlcEventsInterceptors() ?? [],
      handler: handler
    )
  }

  ///
  ///Deprecated, use SendPaymentV2. SendPayment attempts to route a payment
  ///described by the passed PaymentRequest to the final destination. The call
  ///returns a stream of payment status updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SendPayment.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func sendPayment(
    _ request: Routerrpc_SendPaymentRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Routerrpc_PaymentStatus) -> Void
  ) -> ServerStreamingCall<Routerrpc_SendPaymentRequest, Routerrpc_PaymentStatus> {
    return self.makeServerStreamingCall(
      path: Routerrpc_RouterClientMetadata.Methods.sendPayment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendPaymentInterceptors() ?? [],
      handler: handler
    )
  }

  ///
  ///Deprecated, use TrackPaymentV2. TrackPayment returns an update stream for
  ///the payment identified by the payment hash.
  ///
  /// - Parameters:
  ///   - request: Request to send to TrackPayment.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func trackPayment(
    _ request: Routerrpc_TrackPaymentRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Routerrpc_PaymentStatus) -> Void
  ) -> ServerStreamingCall<Routerrpc_TrackPaymentRequest, Routerrpc_PaymentStatus> {
    return self.makeServerStreamingCall(
      path: Routerrpc_RouterClientMetadata.Methods.trackPayment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTrackPaymentInterceptors() ?? [],
      handler: handler
    )
  }

  ///*
  ///HtlcInterceptor dispatches a bi-directional streaming RPC in which
  ///Forwarded HTLC requests are sent to the client and the client responds with
  ///a boolean that tells LND if this htlc should be intercepted.
  ///In case of interception, the htlc can be either settled, cancelled or
  ///resumed later by using the ResolveHoldForward endpoint.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func htlcInterceptor(
    callOptions: CallOptions? = nil,
    handler: @escaping (Routerrpc_ForwardHtlcInterceptRequest) -> Void
  ) -> BidirectionalStreamingCall<Routerrpc_ForwardHtlcInterceptResponse, Routerrpc_ForwardHtlcInterceptRequest> {
    return self.makeBidirectionalStreamingCall(
      path: Routerrpc_RouterClientMetadata.Methods.htlcInterceptor.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHtlcInterceptorInterceptors() ?? [],
      handler: handler
    )
  }

  ///
  ///UpdateChanStatus attempts to manually set the state of a channel
  ///(enabled, disabled, or auto). A manual "disable" request will cause the
  ///channel to stay disabled until a subsequent manual request of either
  ///"enable" or "auto".
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateChanStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateChanStatus(
    _ request: Routerrpc_UpdateChanStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Routerrpc_UpdateChanStatusRequest, Routerrpc_UpdateChanStatusResponse> {
    return self.makeUnaryCall(
      path: Routerrpc_RouterClientMetadata.Methods.updateChanStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateChanStatusInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Routerrpc_RouterClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Routerrpc_RouterNIOClient")
public final class Routerrpc_RouterClient: Routerrpc_RouterClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Routerrpc_RouterClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Routerrpc_RouterClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the routerrpc.Router service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Routerrpc_RouterClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Routerrpc_RouterNIOClient: Routerrpc_RouterClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Routerrpc_RouterClientInterceptorFactoryProtocol?

  /// Creates a client for the routerrpc.Router service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Routerrpc_RouterClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// Router is a service that offers advanced interaction with the router
/// subsystem of the daemon.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Routerrpc_RouterAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Routerrpc_RouterClientInterceptorFactoryProtocol? { get }

  func makeSendPaymentV2Call(
    _ request: Routerrpc_SendPaymentRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Routerrpc_SendPaymentRequest, Lnrpc_Payment>

  func makeTrackPaymentV2Call(
    _ request: Routerrpc_TrackPaymentRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Routerrpc_TrackPaymentRequest, Lnrpc_Payment>

  func makeEstimateRouteFeeCall(
    _ request: Routerrpc_RouteFeeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Routerrpc_RouteFeeRequest, Routerrpc_RouteFeeResponse>

  func makeSendToRouteCall(
    _ request: Routerrpc_SendToRouteRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Routerrpc_SendToRouteRequest, Routerrpc_SendToRouteResponse>

  func makeSendToRouteV2Call(
    _ request: Routerrpc_SendToRouteRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Routerrpc_SendToRouteRequest, Lnrpc_HTLCAttempt>

  func makeResetMissionControlCall(
    _ request: Routerrpc_ResetMissionControlRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Routerrpc_ResetMissionControlRequest, Routerrpc_ResetMissionControlResponse>

  func makeQueryMissionControlCall(
    _ request: Routerrpc_QueryMissionControlRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Routerrpc_QueryMissionControlRequest, Routerrpc_QueryMissionControlResponse>

  func makeXimportMissionControlCall(
    _ request: Routerrpc_XImportMissionControlRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Routerrpc_XImportMissionControlRequest, Routerrpc_XImportMissionControlResponse>

  func makeGetMissionControlConfigCall(
    _ request: Routerrpc_GetMissionControlConfigRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Routerrpc_GetMissionControlConfigRequest, Routerrpc_GetMissionControlConfigResponse>

  func makeSetMissionControlConfigCall(
    _ request: Routerrpc_SetMissionControlConfigRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Routerrpc_SetMissionControlConfigRequest, Routerrpc_SetMissionControlConfigResponse>

  func makeQueryProbabilityCall(
    _ request: Routerrpc_QueryProbabilityRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Routerrpc_QueryProbabilityRequest, Routerrpc_QueryProbabilityResponse>

  func makeBuildRouteCall(
    _ request: Routerrpc_BuildRouteRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Routerrpc_BuildRouteRequest, Routerrpc_BuildRouteResponse>

  func makeSubscribeHtlcEventsCall(
    _ request: Routerrpc_SubscribeHtlcEventsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Routerrpc_SubscribeHtlcEventsRequest, Routerrpc_HtlcEvent>

  func makeSendPaymentCall(
    _ request: Routerrpc_SendPaymentRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Routerrpc_SendPaymentRequest, Routerrpc_PaymentStatus>

  func makeTrackPaymentCall(
    _ request: Routerrpc_TrackPaymentRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Routerrpc_TrackPaymentRequest, Routerrpc_PaymentStatus>

  func makeHtlcInterceptorCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Routerrpc_ForwardHtlcInterceptResponse, Routerrpc_ForwardHtlcInterceptRequest>

  func makeUpdateChanStatusCall(
    _ request: Routerrpc_UpdateChanStatusRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Routerrpc_UpdateChanStatusRequest, Routerrpc_UpdateChanStatusResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Routerrpc_RouterAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Routerrpc_RouterClientMetadata.serviceDescriptor
  }

  public var interceptors: Routerrpc_RouterClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeSendPaymentV2Call(
    _ request: Routerrpc_SendPaymentRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Routerrpc_SendPaymentRequest, Lnrpc_Payment> {
    return self.makeAsyncServerStreamingCall(
      path: Routerrpc_RouterClientMetadata.Methods.sendPaymentV2.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendPaymentV2Interceptors() ?? []
    )
  }

  public func makeTrackPaymentV2Call(
    _ request: Routerrpc_TrackPaymentRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Routerrpc_TrackPaymentRequest, Lnrpc_Payment> {
    return self.makeAsyncServerStreamingCall(
      path: Routerrpc_RouterClientMetadata.Methods.trackPaymentV2.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTrackPaymentV2Interceptors() ?? []
    )
  }

  public func makeEstimateRouteFeeCall(
    _ request: Routerrpc_RouteFeeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Routerrpc_RouteFeeRequest, Routerrpc_RouteFeeResponse> {
    return self.makeAsyncUnaryCall(
      path: Routerrpc_RouterClientMetadata.Methods.estimateRouteFee.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateRouteFeeInterceptors() ?? []
    )
  }

  public func makeSendToRouteCall(
    _ request: Routerrpc_SendToRouteRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Routerrpc_SendToRouteRequest, Routerrpc_SendToRouteResponse> {
    return self.makeAsyncUnaryCall(
      path: Routerrpc_RouterClientMetadata.Methods.sendToRoute.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendToRouteInterceptors() ?? []
    )
  }

  public func makeSendToRouteV2Call(
    _ request: Routerrpc_SendToRouteRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Routerrpc_SendToRouteRequest, Lnrpc_HTLCAttempt> {
    return self.makeAsyncUnaryCall(
      path: Routerrpc_RouterClientMetadata.Methods.sendToRouteV2.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendToRouteV2Interceptors() ?? []
    )
  }

  public func makeResetMissionControlCall(
    _ request: Routerrpc_ResetMissionControlRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Routerrpc_ResetMissionControlRequest, Routerrpc_ResetMissionControlResponse> {
    return self.makeAsyncUnaryCall(
      path: Routerrpc_RouterClientMetadata.Methods.resetMissionControl.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResetMissionControlInterceptors() ?? []
    )
  }

  public func makeQueryMissionControlCall(
    _ request: Routerrpc_QueryMissionControlRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Routerrpc_QueryMissionControlRequest, Routerrpc_QueryMissionControlResponse> {
    return self.makeAsyncUnaryCall(
      path: Routerrpc_RouterClientMetadata.Methods.queryMissionControl.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryMissionControlInterceptors() ?? []
    )
  }

  public func makeXimportMissionControlCall(
    _ request: Routerrpc_XImportMissionControlRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Routerrpc_XImportMissionControlRequest, Routerrpc_XImportMissionControlResponse> {
    return self.makeAsyncUnaryCall(
      path: Routerrpc_RouterClientMetadata.Methods.xImportMissionControl.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeXImportMissionControlInterceptors() ?? []
    )
  }

  public func makeGetMissionControlConfigCall(
    _ request: Routerrpc_GetMissionControlConfigRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Routerrpc_GetMissionControlConfigRequest, Routerrpc_GetMissionControlConfigResponse> {
    return self.makeAsyncUnaryCall(
      path: Routerrpc_RouterClientMetadata.Methods.getMissionControlConfig.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMissionControlConfigInterceptors() ?? []
    )
  }

  public func makeSetMissionControlConfigCall(
    _ request: Routerrpc_SetMissionControlConfigRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Routerrpc_SetMissionControlConfigRequest, Routerrpc_SetMissionControlConfigResponse> {
    return self.makeAsyncUnaryCall(
      path: Routerrpc_RouterClientMetadata.Methods.setMissionControlConfig.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetMissionControlConfigInterceptors() ?? []
    )
  }

  public func makeQueryProbabilityCall(
    _ request: Routerrpc_QueryProbabilityRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Routerrpc_QueryProbabilityRequest, Routerrpc_QueryProbabilityResponse> {
    return self.makeAsyncUnaryCall(
      path: Routerrpc_RouterClientMetadata.Methods.queryProbability.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryProbabilityInterceptors() ?? []
    )
  }

  public func makeBuildRouteCall(
    _ request: Routerrpc_BuildRouteRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Routerrpc_BuildRouteRequest, Routerrpc_BuildRouteResponse> {
    return self.makeAsyncUnaryCall(
      path: Routerrpc_RouterClientMetadata.Methods.buildRoute.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBuildRouteInterceptors() ?? []
    )
  }

  public func makeSubscribeHtlcEventsCall(
    _ request: Routerrpc_SubscribeHtlcEventsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Routerrpc_SubscribeHtlcEventsRequest, Routerrpc_HtlcEvent> {
    return self.makeAsyncServerStreamingCall(
      path: Routerrpc_RouterClientMetadata.Methods.subscribeHtlcEvents.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeHtlcEventsInterceptors() ?? []
    )
  }

  public func makeSendPaymentCall(
    _ request: Routerrpc_SendPaymentRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Routerrpc_SendPaymentRequest, Routerrpc_PaymentStatus> {
    return self.makeAsyncServerStreamingCall(
      path: Routerrpc_RouterClientMetadata.Methods.sendPayment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendPaymentInterceptors() ?? []
    )
  }

  public func makeTrackPaymentCall(
    _ request: Routerrpc_TrackPaymentRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Routerrpc_TrackPaymentRequest, Routerrpc_PaymentStatus> {
    return self.makeAsyncServerStreamingCall(
      path: Routerrpc_RouterClientMetadata.Methods.trackPayment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTrackPaymentInterceptors() ?? []
    )
  }

  public func makeHtlcInterceptorCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Routerrpc_ForwardHtlcInterceptResponse, Routerrpc_ForwardHtlcInterceptRequest> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Routerrpc_RouterClientMetadata.Methods.htlcInterceptor.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHtlcInterceptorInterceptors() ?? []
    )
  }

  public func makeUpdateChanStatusCall(
    _ request: Routerrpc_UpdateChanStatusRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Routerrpc_UpdateChanStatusRequest, Routerrpc_UpdateChanStatusResponse> {
    return self.makeAsyncUnaryCall(
      path: Routerrpc_RouterClientMetadata.Methods.updateChanStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateChanStatusInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Routerrpc_RouterAsyncClientProtocol {
  public func sendPaymentV2(
    _ request: Routerrpc_SendPaymentRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Lnrpc_Payment> {
    return self.performAsyncServerStreamingCall(
      path: Routerrpc_RouterClientMetadata.Methods.sendPaymentV2.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendPaymentV2Interceptors() ?? []
    )
  }

  public func trackPaymentV2(
    _ request: Routerrpc_TrackPaymentRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Lnrpc_Payment> {
    return self.performAsyncServerStreamingCall(
      path: Routerrpc_RouterClientMetadata.Methods.trackPaymentV2.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTrackPaymentV2Interceptors() ?? []
    )
  }

  public func estimateRouteFee(
    _ request: Routerrpc_RouteFeeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Routerrpc_RouteFeeResponse {
    return try await self.performAsyncUnaryCall(
      path: Routerrpc_RouterClientMetadata.Methods.estimateRouteFee.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateRouteFeeInterceptors() ?? []
    )
  }

  public func sendToRoute(
    _ request: Routerrpc_SendToRouteRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Routerrpc_SendToRouteResponse {
    return try await self.performAsyncUnaryCall(
      path: Routerrpc_RouterClientMetadata.Methods.sendToRoute.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendToRouteInterceptors() ?? []
    )
  }

  public func sendToRouteV2(
    _ request: Routerrpc_SendToRouteRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Lnrpc_HTLCAttempt {
    return try await self.performAsyncUnaryCall(
      path: Routerrpc_RouterClientMetadata.Methods.sendToRouteV2.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendToRouteV2Interceptors() ?? []
    )
  }

  public func resetMissionControl(
    _ request: Routerrpc_ResetMissionControlRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Routerrpc_ResetMissionControlResponse {
    return try await self.performAsyncUnaryCall(
      path: Routerrpc_RouterClientMetadata.Methods.resetMissionControl.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResetMissionControlInterceptors() ?? []
    )
  }

  public func queryMissionControl(
    _ request: Routerrpc_QueryMissionControlRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Routerrpc_QueryMissionControlResponse {
    return try await self.performAsyncUnaryCall(
      path: Routerrpc_RouterClientMetadata.Methods.queryMissionControl.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryMissionControlInterceptors() ?? []
    )
  }

  public func xImportMissionControl(
    _ request: Routerrpc_XImportMissionControlRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Routerrpc_XImportMissionControlResponse {
    return try await self.performAsyncUnaryCall(
      path: Routerrpc_RouterClientMetadata.Methods.xImportMissionControl.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeXImportMissionControlInterceptors() ?? []
    )
  }

  public func getMissionControlConfig(
    _ request: Routerrpc_GetMissionControlConfigRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Routerrpc_GetMissionControlConfigResponse {
    return try await self.performAsyncUnaryCall(
      path: Routerrpc_RouterClientMetadata.Methods.getMissionControlConfig.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMissionControlConfigInterceptors() ?? []
    )
  }

  public func setMissionControlConfig(
    _ request: Routerrpc_SetMissionControlConfigRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Routerrpc_SetMissionControlConfigResponse {
    return try await self.performAsyncUnaryCall(
      path: Routerrpc_RouterClientMetadata.Methods.setMissionControlConfig.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetMissionControlConfigInterceptors() ?? []
    )
  }

  public func queryProbability(
    _ request: Routerrpc_QueryProbabilityRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Routerrpc_QueryProbabilityResponse {
    return try await self.performAsyncUnaryCall(
      path: Routerrpc_RouterClientMetadata.Methods.queryProbability.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryProbabilityInterceptors() ?? []
    )
  }

  public func buildRoute(
    _ request: Routerrpc_BuildRouteRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Routerrpc_BuildRouteResponse {
    return try await self.performAsyncUnaryCall(
      path: Routerrpc_RouterClientMetadata.Methods.buildRoute.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBuildRouteInterceptors() ?? []
    )
  }

  public func subscribeHtlcEvents(
    _ request: Routerrpc_SubscribeHtlcEventsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Routerrpc_HtlcEvent> {
    return self.performAsyncServerStreamingCall(
      path: Routerrpc_RouterClientMetadata.Methods.subscribeHtlcEvents.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeHtlcEventsInterceptors() ?? []
    )
  }

  public func sendPayment(
    _ request: Routerrpc_SendPaymentRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Routerrpc_PaymentStatus> {
    return self.performAsyncServerStreamingCall(
      path: Routerrpc_RouterClientMetadata.Methods.sendPayment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendPaymentInterceptors() ?? []
    )
  }

  public func trackPayment(
    _ request: Routerrpc_TrackPaymentRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Routerrpc_PaymentStatus> {
    return self.performAsyncServerStreamingCall(
      path: Routerrpc_RouterClientMetadata.Methods.trackPayment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTrackPaymentInterceptors() ?? []
    )
  }

  public func htlcInterceptor<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Routerrpc_ForwardHtlcInterceptRequest> where RequestStream: Sequence, RequestStream.Element == Routerrpc_ForwardHtlcInterceptResponse {
    return self.performAsyncBidirectionalStreamingCall(
      path: Routerrpc_RouterClientMetadata.Methods.htlcInterceptor.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHtlcInterceptorInterceptors() ?? []
    )
  }

  public func htlcInterceptor<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Routerrpc_ForwardHtlcInterceptRequest> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Routerrpc_ForwardHtlcInterceptResponse {
    return self.performAsyncBidirectionalStreamingCall(
      path: Routerrpc_RouterClientMetadata.Methods.htlcInterceptor.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHtlcInterceptorInterceptors() ?? []
    )
  }

  public func updateChanStatus(
    _ request: Routerrpc_UpdateChanStatusRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Routerrpc_UpdateChanStatusResponse {
    return try await self.performAsyncUnaryCall(
      path: Routerrpc_RouterClientMetadata.Methods.updateChanStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateChanStatusInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Routerrpc_RouterAsyncClient: Routerrpc_RouterAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Routerrpc_RouterClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Routerrpc_RouterClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Routerrpc_RouterClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'sendPaymentV2'.
  func makeSendPaymentV2Interceptors() -> [ClientInterceptor<Routerrpc_SendPaymentRequest, Lnrpc_Payment>]

  /// - Returns: Interceptors to use when invoking 'trackPaymentV2'.
  func makeTrackPaymentV2Interceptors() -> [ClientInterceptor<Routerrpc_TrackPaymentRequest, Lnrpc_Payment>]

  /// - Returns: Interceptors to use when invoking 'estimateRouteFee'.
  func makeEstimateRouteFeeInterceptors() -> [ClientInterceptor<Routerrpc_RouteFeeRequest, Routerrpc_RouteFeeResponse>]

  /// - Returns: Interceptors to use when invoking 'sendToRoute'.
  func makeSendToRouteInterceptors() -> [ClientInterceptor<Routerrpc_SendToRouteRequest, Routerrpc_SendToRouteResponse>]

  /// - Returns: Interceptors to use when invoking 'sendToRouteV2'.
  func makeSendToRouteV2Interceptors() -> [ClientInterceptor<Routerrpc_SendToRouteRequest, Lnrpc_HTLCAttempt>]

  /// - Returns: Interceptors to use when invoking 'resetMissionControl'.
  func makeResetMissionControlInterceptors() -> [ClientInterceptor<Routerrpc_ResetMissionControlRequest, Routerrpc_ResetMissionControlResponse>]

  /// - Returns: Interceptors to use when invoking 'queryMissionControl'.
  func makeQueryMissionControlInterceptors() -> [ClientInterceptor<Routerrpc_QueryMissionControlRequest, Routerrpc_QueryMissionControlResponse>]

  /// - Returns: Interceptors to use when invoking 'xImportMissionControl'.
  func makeXImportMissionControlInterceptors() -> [ClientInterceptor<Routerrpc_XImportMissionControlRequest, Routerrpc_XImportMissionControlResponse>]

  /// - Returns: Interceptors to use when invoking 'getMissionControlConfig'.
  func makeGetMissionControlConfigInterceptors() -> [ClientInterceptor<Routerrpc_GetMissionControlConfigRequest, Routerrpc_GetMissionControlConfigResponse>]

  /// - Returns: Interceptors to use when invoking 'setMissionControlConfig'.
  func makeSetMissionControlConfigInterceptors() -> [ClientInterceptor<Routerrpc_SetMissionControlConfigRequest, Routerrpc_SetMissionControlConfigResponse>]

  /// - Returns: Interceptors to use when invoking 'queryProbability'.
  func makeQueryProbabilityInterceptors() -> [ClientInterceptor<Routerrpc_QueryProbabilityRequest, Routerrpc_QueryProbabilityResponse>]

  /// - Returns: Interceptors to use when invoking 'buildRoute'.
  func makeBuildRouteInterceptors() -> [ClientInterceptor<Routerrpc_BuildRouteRequest, Routerrpc_BuildRouteResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeHtlcEvents'.
  func makeSubscribeHtlcEventsInterceptors() -> [ClientInterceptor<Routerrpc_SubscribeHtlcEventsRequest, Routerrpc_HtlcEvent>]

  /// - Returns: Interceptors to use when invoking 'sendPayment'.
  func makeSendPaymentInterceptors() -> [ClientInterceptor<Routerrpc_SendPaymentRequest, Routerrpc_PaymentStatus>]

  /// - Returns: Interceptors to use when invoking 'trackPayment'.
  func makeTrackPaymentInterceptors() -> [ClientInterceptor<Routerrpc_TrackPaymentRequest, Routerrpc_PaymentStatus>]

  /// - Returns: Interceptors to use when invoking 'htlcInterceptor'.
  func makeHtlcInterceptorInterceptors() -> [ClientInterceptor<Routerrpc_ForwardHtlcInterceptResponse, Routerrpc_ForwardHtlcInterceptRequest>]

  /// - Returns: Interceptors to use when invoking 'updateChanStatus'.
  func makeUpdateChanStatusInterceptors() -> [ClientInterceptor<Routerrpc_UpdateChanStatusRequest, Routerrpc_UpdateChanStatusResponse>]
}

public enum Routerrpc_RouterClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Router",
    fullName: "routerrpc.Router",
    methods: [
      Routerrpc_RouterClientMetadata.Methods.sendPaymentV2,
      Routerrpc_RouterClientMetadata.Methods.trackPaymentV2,
      Routerrpc_RouterClientMetadata.Methods.estimateRouteFee,
      Routerrpc_RouterClientMetadata.Methods.sendToRoute,
      Routerrpc_RouterClientMetadata.Methods.sendToRouteV2,
      Routerrpc_RouterClientMetadata.Methods.resetMissionControl,
      Routerrpc_RouterClientMetadata.Methods.queryMissionControl,
      Routerrpc_RouterClientMetadata.Methods.xImportMissionControl,
      Routerrpc_RouterClientMetadata.Methods.getMissionControlConfig,
      Routerrpc_RouterClientMetadata.Methods.setMissionControlConfig,
      Routerrpc_RouterClientMetadata.Methods.queryProbability,
      Routerrpc_RouterClientMetadata.Methods.buildRoute,
      Routerrpc_RouterClientMetadata.Methods.subscribeHtlcEvents,
      Routerrpc_RouterClientMetadata.Methods.sendPayment,
      Routerrpc_RouterClientMetadata.Methods.trackPayment,
      Routerrpc_RouterClientMetadata.Methods.htlcInterceptor,
      Routerrpc_RouterClientMetadata.Methods.updateChanStatus,
    ]
  )

  public enum Methods {
    public static let sendPaymentV2 = GRPCMethodDescriptor(
      name: "SendPaymentV2",
      path: "/routerrpc.Router/SendPaymentV2",
      type: GRPCCallType.serverStreaming
    )

    public static let trackPaymentV2 = GRPCMethodDescriptor(
      name: "TrackPaymentV2",
      path: "/routerrpc.Router/TrackPaymentV2",
      type: GRPCCallType.serverStreaming
    )

    public static let estimateRouteFee = GRPCMethodDescriptor(
      name: "EstimateRouteFee",
      path: "/routerrpc.Router/EstimateRouteFee",
      type: GRPCCallType.unary
    )

    public static let sendToRoute = GRPCMethodDescriptor(
      name: "SendToRoute",
      path: "/routerrpc.Router/SendToRoute",
      type: GRPCCallType.unary
    )

    public static let sendToRouteV2 = GRPCMethodDescriptor(
      name: "SendToRouteV2",
      path: "/routerrpc.Router/SendToRouteV2",
      type: GRPCCallType.unary
    )

    public static let resetMissionControl = GRPCMethodDescriptor(
      name: "ResetMissionControl",
      path: "/routerrpc.Router/ResetMissionControl",
      type: GRPCCallType.unary
    )

    public static let queryMissionControl = GRPCMethodDescriptor(
      name: "QueryMissionControl",
      path: "/routerrpc.Router/QueryMissionControl",
      type: GRPCCallType.unary
    )

    public static let xImportMissionControl = GRPCMethodDescriptor(
      name: "XImportMissionControl",
      path: "/routerrpc.Router/XImportMissionControl",
      type: GRPCCallType.unary
    )

    public static let getMissionControlConfig = GRPCMethodDescriptor(
      name: "GetMissionControlConfig",
      path: "/routerrpc.Router/GetMissionControlConfig",
      type: GRPCCallType.unary
    )

    public static let setMissionControlConfig = GRPCMethodDescriptor(
      name: "SetMissionControlConfig",
      path: "/routerrpc.Router/SetMissionControlConfig",
      type: GRPCCallType.unary
    )

    public static let queryProbability = GRPCMethodDescriptor(
      name: "QueryProbability",
      path: "/routerrpc.Router/QueryProbability",
      type: GRPCCallType.unary
    )

    public static let buildRoute = GRPCMethodDescriptor(
      name: "BuildRoute",
      path: "/routerrpc.Router/BuildRoute",
      type: GRPCCallType.unary
    )

    public static let subscribeHtlcEvents = GRPCMethodDescriptor(
      name: "SubscribeHtlcEvents",
      path: "/routerrpc.Router/SubscribeHtlcEvents",
      type: GRPCCallType.serverStreaming
    )

    public static let sendPayment = GRPCMethodDescriptor(
      name: "SendPayment",
      path: "/routerrpc.Router/SendPayment",
      type: GRPCCallType.serverStreaming
    )

    public static let trackPayment = GRPCMethodDescriptor(
      name: "TrackPayment",
      path: "/routerrpc.Router/TrackPayment",
      type: GRPCCallType.serverStreaming
    )

    public static let htlcInterceptor = GRPCMethodDescriptor(
      name: "HtlcInterceptor",
      path: "/routerrpc.Router/HtlcInterceptor",
      type: GRPCCallType.bidirectionalStreaming
    )

    public static let updateChanStatus = GRPCMethodDescriptor(
      name: "UpdateChanStatus",
      path: "/routerrpc.Router/UpdateChanStatus",
      type: GRPCCallType.unary
    )
  }
}

