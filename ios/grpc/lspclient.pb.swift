// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: lspclient.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// github.com/nayutaco/NayutaHub2LspdProto
public enum Lspclient_IntegrityResult: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case none // = 0
  case ok // = 1
  case ng // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .none
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .ok
    case 2: self = .ng
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .none: return 0
    case .ok: return 1
    case .ng: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Lspclient_IntegrityResult: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Lspclient_IntegrityResult] = [
    .none,
    .ok,
    .ng,
  ]
}

#endif  // swift(>=4.2)

public struct Lspclient_SubmarineCreateKeysResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var preimage: Data = Data()

  public var paymentHash: Data = Data()

  public var repayPrivkey: Data = Data()

  public var repayPubkey: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lspclient_SubmarineRegisterResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var htlcPubkey: Data = Data()

  public var script: Data = Data()

  public var scriptAddress: String = String()

  public var height: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lspclient_SubmarineDetectResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var inTxid: String = String()

  public var inIndex: Int32 = 0

  public var inAmount: Int64 = 0

  public var inHeight: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lspclient_SubmarineRepayData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var privkey: Data = Data()

  public var script: Data = Data()

  public var txid: String = String()

  public var index: Int32 = 0

  public var amount: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lspclient_SubmarineRepayRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var data: [Lspclient_SubmarineRepayData] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lspclient_QueryRoutePaymentResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var paymentHash: String = String()

  public var status: Int32 = 0

  public var failure: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Lspclient_IntegrityResult: @unchecked Sendable {}
extension Lspclient_SubmarineCreateKeysResult: @unchecked Sendable {}
extension Lspclient_SubmarineRegisterResult: @unchecked Sendable {}
extension Lspclient_SubmarineDetectResult: @unchecked Sendable {}
extension Lspclient_SubmarineRepayData: @unchecked Sendable {}
extension Lspclient_SubmarineRepayRequest: @unchecked Sendable {}
extension Lspclient_QueryRoutePaymentResult: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "lspclient"

extension Lspclient_IntegrityResult: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "INTEGRITYRESULT_NONE"),
    1: .same(proto: "INTEGRITYRESULT_OK"),
    2: .same(proto: "INTEGRITYRESULT_NG"),
  ]
}

extension Lspclient_SubmarineCreateKeysResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubmarineCreateKeysResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "preimage"),
    2: .standard(proto: "payment_hash"),
    3: .standard(proto: "repay_privkey"),
    4: .standard(proto: "repay_pubkey"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.preimage) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.paymentHash) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.repayPrivkey) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.repayPubkey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.preimage.isEmpty {
      try visitor.visitSingularBytesField(value: self.preimage, fieldNumber: 1)
    }
    if !self.paymentHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.paymentHash, fieldNumber: 2)
    }
    if !self.repayPrivkey.isEmpty {
      try visitor.visitSingularBytesField(value: self.repayPrivkey, fieldNumber: 3)
    }
    if !self.repayPubkey.isEmpty {
      try visitor.visitSingularBytesField(value: self.repayPubkey, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lspclient_SubmarineCreateKeysResult, rhs: Lspclient_SubmarineCreateKeysResult) -> Bool {
    if lhs.preimage != rhs.preimage {return false}
    if lhs.paymentHash != rhs.paymentHash {return false}
    if lhs.repayPrivkey != rhs.repayPrivkey {return false}
    if lhs.repayPubkey != rhs.repayPubkey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lspclient_SubmarineRegisterResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubmarineRegisterResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "htlc_pubkey"),
    2: .same(proto: "script"),
    3: .standard(proto: "script_address"),
    4: .same(proto: "height"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.htlcPubkey) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.script) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.scriptAddress) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.height) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.htlcPubkey.isEmpty {
      try visitor.visitSingularBytesField(value: self.htlcPubkey, fieldNumber: 1)
    }
    if !self.script.isEmpty {
      try visitor.visitSingularBytesField(value: self.script, fieldNumber: 2)
    }
    if !self.scriptAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.scriptAddress, fieldNumber: 3)
    }
    if self.height != 0 {
      try visitor.visitSingularUInt32Field(value: self.height, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lspclient_SubmarineRegisterResult, rhs: Lspclient_SubmarineRegisterResult) -> Bool {
    if lhs.htlcPubkey != rhs.htlcPubkey {return false}
    if lhs.script != rhs.script {return false}
    if lhs.scriptAddress != rhs.scriptAddress {return false}
    if lhs.height != rhs.height {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lspclient_SubmarineDetectResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubmarineDetectResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "in_txid"),
    2: .standard(proto: "in_index"),
    3: .standard(proto: "in_amount"),
    4: .standard(proto: "in_height"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.inTxid) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.inIndex) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.inAmount) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.inHeight) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.inTxid.isEmpty {
      try visitor.visitSingularStringField(value: self.inTxid, fieldNumber: 1)
    }
    if self.inIndex != 0 {
      try visitor.visitSingularInt32Field(value: self.inIndex, fieldNumber: 2)
    }
    if self.inAmount != 0 {
      try visitor.visitSingularInt64Field(value: self.inAmount, fieldNumber: 3)
    }
    if self.inHeight != 0 {
      try visitor.visitSingularUInt32Field(value: self.inHeight, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lspclient_SubmarineDetectResult, rhs: Lspclient_SubmarineDetectResult) -> Bool {
    if lhs.inTxid != rhs.inTxid {return false}
    if lhs.inIndex != rhs.inIndex {return false}
    if lhs.inAmount != rhs.inAmount {return false}
    if lhs.inHeight != rhs.inHeight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lspclient_SubmarineRepayData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubmarineRepayData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "privkey"),
    2: .same(proto: "script"),
    3: .same(proto: "txid"),
    4: .same(proto: "index"),
    5: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.privkey) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.script) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.txid) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.index) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.amount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.privkey.isEmpty {
      try visitor.visitSingularBytesField(value: self.privkey, fieldNumber: 1)
    }
    if !self.script.isEmpty {
      try visitor.visitSingularBytesField(value: self.script, fieldNumber: 2)
    }
    if !self.txid.isEmpty {
      try visitor.visitSingularStringField(value: self.txid, fieldNumber: 3)
    }
    if self.index != 0 {
      try visitor.visitSingularInt32Field(value: self.index, fieldNumber: 4)
    }
    if self.amount != 0 {
      try visitor.visitSingularInt64Field(value: self.amount, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lspclient_SubmarineRepayData, rhs: Lspclient_SubmarineRepayData) -> Bool {
    if lhs.privkey != rhs.privkey {return false}
    if lhs.script != rhs.script {return false}
    if lhs.txid != rhs.txid {return false}
    if lhs.index != rhs.index {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lspclient_SubmarineRepayRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubmarineRepayRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lspclient_SubmarineRepayRequest, rhs: Lspclient_SubmarineRepayRequest) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lspclient_QueryRoutePaymentResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QueryRoutePaymentResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "payment_hash"),
    2: .same(proto: "status"),
    3: .same(proto: "failure"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.paymentHash) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.status) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.failure) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.paymentHash.isEmpty {
      try visitor.visitSingularStringField(value: self.paymentHash, fieldNumber: 1)
    }
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 2)
    }
    if self.failure != 0 {
      try visitor.visitSingularInt32Field(value: self.failure, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lspclient_QueryRoutePaymentResult, rhs: Lspclient_QueryRoutePaymentResult) -> Bool {
    if lhs.paymentHash != rhs.paymentHash {return false}
    if lhs.status != rhs.status {return false}
    if lhs.failure != rhs.failure {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
